/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef cell_TYPES_H
#define cell_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>
#include "cellState_types.h"




class Cell;

typedef struct _Cell__isset {
  _Cell__isset() : row(false), column(false), state(false) {}
  bool row :1;
  bool column :1;
  bool state :1;
} _Cell__isset;

class Cell : public virtual ::apache::thrift::TBase {
 public:

  Cell(const Cell&);
  Cell& operator=(const Cell&);
  Cell() : row(0), column(0), state(( ::CellState::type)0) {
  }

  virtual ~Cell() noexcept;
  int64_t row;
  int64_t column;
   ::CellState::type state;

  _Cell__isset __isset;

  void __set_row(const int64_t val);

  void __set_column(const int64_t val);

  void __set_state(const  ::CellState::type val);

  bool operator == (const Cell & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(column == rhs.column))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const Cell &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Cell & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Cell &a, Cell &b);

std::ostream& operator<<(std::ostream& out, const Cell& obj);



#endif
