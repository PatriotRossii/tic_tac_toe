/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GameLogicService_H
#define GameLogicService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "main_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class GameLogicServiceIf {
 public:
  virtual ~GameLogicServiceIf() {}
  virtual void move(const int64_t row, const int64_t column) = 0;
  virtual  ::GameState::type getState() = 0;
  virtual bool isGameEnd() = 0;
};

class GameLogicServiceIfFactory {
 public:
  typedef GameLogicServiceIf Handler;

  virtual ~GameLogicServiceIfFactory() {}

  virtual GameLogicServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GameLogicServiceIf* /* handler */) = 0;
};

class GameLogicServiceIfSingletonFactory : virtual public GameLogicServiceIfFactory {
 public:
  GameLogicServiceIfSingletonFactory(const ::std::shared_ptr<GameLogicServiceIf>& iface) : iface_(iface) {}
  virtual ~GameLogicServiceIfSingletonFactory() {}

  virtual GameLogicServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GameLogicServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<GameLogicServiceIf> iface_;
};

class GameLogicServiceNull : virtual public GameLogicServiceIf {
 public:
  virtual ~GameLogicServiceNull() {}
  void move(const int64_t /* row */, const int64_t /* column */) {
    return;
  }
   ::GameState::type getState() {
     ::GameState::type _return = ( ::GameState::type)0;
    return _return;
  }
  bool isGameEnd() {
    bool _return = false;
    return _return;
  }
};

typedef struct _GameLogicService_move_args__isset {
  _GameLogicService_move_args__isset() : row(false), column(false) {}
  bool row :1;
  bool column :1;
} _GameLogicService_move_args__isset;

class GameLogicService_move_args {
 public:

  GameLogicService_move_args(const GameLogicService_move_args&);
  GameLogicService_move_args& operator=(const GameLogicService_move_args&);
  GameLogicService_move_args() : row(0), column(0) {
  }

  virtual ~GameLogicService_move_args() noexcept;
  int64_t row;
  int64_t column;

  _GameLogicService_move_args__isset __isset;

  void __set_row(const int64_t val);

  void __set_column(const int64_t val);

  bool operator == (const GameLogicService_move_args & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(column == rhs.column))
      return false;
    return true;
  }
  bool operator != (const GameLogicService_move_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameLogicService_move_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameLogicService_move_pargs {
 public:


  virtual ~GameLogicService_move_pargs() noexcept;
  const int64_t* row;
  const int64_t* column;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameLogicService_move_result {
 public:

  GameLogicService_move_result(const GameLogicService_move_result&);
  GameLogicService_move_result& operator=(const GameLogicService_move_result&);
  GameLogicService_move_result() {
  }

  virtual ~GameLogicService_move_result() noexcept;

  bool operator == (const GameLogicService_move_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameLogicService_move_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameLogicService_move_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameLogicService_move_presult {
 public:


  virtual ~GameLogicService_move_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameLogicService_getState_args {
 public:

  GameLogicService_getState_args(const GameLogicService_getState_args&);
  GameLogicService_getState_args& operator=(const GameLogicService_getState_args&);
  GameLogicService_getState_args() {
  }

  virtual ~GameLogicService_getState_args() noexcept;

  bool operator == (const GameLogicService_getState_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameLogicService_getState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameLogicService_getState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameLogicService_getState_pargs {
 public:


  virtual ~GameLogicService_getState_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameLogicService_getState_result__isset {
  _GameLogicService_getState_result__isset() : success(false) {}
  bool success :1;
} _GameLogicService_getState_result__isset;

class GameLogicService_getState_result {
 public:

  GameLogicService_getState_result(const GameLogicService_getState_result&);
  GameLogicService_getState_result& operator=(const GameLogicService_getState_result&);
  GameLogicService_getState_result() : success(( ::GameState::type)0) {
  }

  virtual ~GameLogicService_getState_result() noexcept;
   ::GameState::type success;

  _GameLogicService_getState_result__isset __isset;

  void __set_success(const  ::GameState::type val);

  bool operator == (const GameLogicService_getState_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameLogicService_getState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameLogicService_getState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameLogicService_getState_presult__isset {
  _GameLogicService_getState_presult__isset() : success(false) {}
  bool success :1;
} _GameLogicService_getState_presult__isset;

class GameLogicService_getState_presult {
 public:


  virtual ~GameLogicService_getState_presult() noexcept;
   ::GameState::type* success;

  _GameLogicService_getState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class GameLogicService_isGameEnd_args {
 public:

  GameLogicService_isGameEnd_args(const GameLogicService_isGameEnd_args&);
  GameLogicService_isGameEnd_args& operator=(const GameLogicService_isGameEnd_args&);
  GameLogicService_isGameEnd_args() {
  }

  virtual ~GameLogicService_isGameEnd_args() noexcept;

  bool operator == (const GameLogicService_isGameEnd_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const GameLogicService_isGameEnd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameLogicService_isGameEnd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GameLogicService_isGameEnd_pargs {
 public:


  virtual ~GameLogicService_isGameEnd_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameLogicService_isGameEnd_result__isset {
  _GameLogicService_isGameEnd_result__isset() : success(false) {}
  bool success :1;
} _GameLogicService_isGameEnd_result__isset;

class GameLogicService_isGameEnd_result {
 public:

  GameLogicService_isGameEnd_result(const GameLogicService_isGameEnd_result&);
  GameLogicService_isGameEnd_result& operator=(const GameLogicService_isGameEnd_result&);
  GameLogicService_isGameEnd_result() : success(0) {
  }

  virtual ~GameLogicService_isGameEnd_result() noexcept;
  bool success;

  _GameLogicService_isGameEnd_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const GameLogicService_isGameEnd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GameLogicService_isGameEnd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GameLogicService_isGameEnd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GameLogicService_isGameEnd_presult__isset {
  _GameLogicService_isGameEnd_presult__isset() : success(false) {}
  bool success :1;
} _GameLogicService_isGameEnd_presult__isset;

class GameLogicService_isGameEnd_presult {
 public:


  virtual ~GameLogicService_isGameEnd_presult() noexcept;
  bool* success;

  _GameLogicService_isGameEnd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GameLogicServiceClient : virtual public GameLogicServiceIf {
 public:
  GameLogicServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  GameLogicServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void move(const int64_t row, const int64_t column);
  void send_move(const int64_t row, const int64_t column);
  void recv_move();
   ::GameState::type getState();
  void send_getState();
   ::GameState::type recv_getState();
  bool isGameEnd();
  void send_isGameEnd();
  bool recv_isGameEnd();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GameLogicServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<GameLogicServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GameLogicServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_move(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isGameEnd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GameLogicServiceProcessor(::std::shared_ptr<GameLogicServiceIf> iface) :
    iface_(iface) {
    processMap_["move"] = &GameLogicServiceProcessor::process_move;
    processMap_["getState"] = &GameLogicServiceProcessor::process_getState;
    processMap_["isGameEnd"] = &GameLogicServiceProcessor::process_isGameEnd;
  }

  virtual ~GameLogicServiceProcessor() {}
};

class GameLogicServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GameLogicServiceProcessorFactory(const ::std::shared_ptr< GameLogicServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< GameLogicServiceIfFactory > handlerFactory_;
};

class GameLogicServiceMultiface : virtual public GameLogicServiceIf {
 public:
  GameLogicServiceMultiface(std::vector<std::shared_ptr<GameLogicServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GameLogicServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<GameLogicServiceIf> > ifaces_;
  GameLogicServiceMultiface() {}
  void add(::std::shared_ptr<GameLogicServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void move(const int64_t row, const int64_t column) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->move(row, column);
    }
    ifaces_[i]->move(row, column);
  }

   ::GameState::type getState() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getState();
    }
    return ifaces_[i]->getState();
  }

  bool isGameEnd() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isGameEnd();
    }
    return ifaces_[i]->isGameEnd();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class GameLogicServiceConcurrentClient : virtual public GameLogicServiceIf {
 public:
  GameLogicServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  GameLogicServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void move(const int64_t row, const int64_t column);
  int32_t send_move(const int64_t row, const int64_t column);
  void recv_move(const int32_t seqid);
   ::GameState::type getState();
  int32_t send_getState();
   ::GameState::type recv_getState(const int32_t seqid);
  bool isGameEnd();
  int32_t send_isGameEnd();
  bool recv_isGameEnd(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
