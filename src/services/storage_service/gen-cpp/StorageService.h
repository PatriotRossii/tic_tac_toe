/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StorageService_H
#define StorageService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "main_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class StorageServiceIf {
 public:
  virtual ~StorageServiceIf() {}
  virtual void setBoardSize(const int64_t height, const int64_t width) = 0;
  virtual void setCell(const int64_t row, const int64_t column, const  ::CellState::type newState) = 0;
  virtual void getCell( ::Cell& _return, const int64_t row, const int64_t column) = 0;
  virtual int64_t getHeight() = 0;
  virtual int64_t getWidth() = 0;
};

class StorageServiceIfFactory {
 public:
  typedef StorageServiceIf Handler;

  virtual ~StorageServiceIfFactory() {}

  virtual StorageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(StorageServiceIf* /* handler */) = 0;
};

class StorageServiceIfSingletonFactory : virtual public StorageServiceIfFactory {
 public:
  StorageServiceIfSingletonFactory(const ::std::shared_ptr<StorageServiceIf>& iface) : iface_(iface) {}
  virtual ~StorageServiceIfSingletonFactory() {}

  virtual StorageServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(StorageServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<StorageServiceIf> iface_;
};

class StorageServiceNull : virtual public StorageServiceIf {
 public:
  virtual ~StorageServiceNull() {}
  void setBoardSize(const int64_t /* height */, const int64_t /* width */) {
    return;
  }
  void setCell(const int64_t /* row */, const int64_t /* column */, const  ::CellState::type /* newState */) {
    return;
  }
  void getCell( ::Cell& /* _return */, const int64_t /* row */, const int64_t /* column */) {
    return;
  }
  int64_t getHeight() {
    int64_t _return = 0;
    return _return;
  }
  int64_t getWidth() {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _StorageService_setBoardSize_args__isset {
  _StorageService_setBoardSize_args__isset() : height(false), width(false) {}
  bool height :1;
  bool width :1;
} _StorageService_setBoardSize_args__isset;

class StorageService_setBoardSize_args {
 public:

  StorageService_setBoardSize_args(const StorageService_setBoardSize_args&);
  StorageService_setBoardSize_args& operator=(const StorageService_setBoardSize_args&);
  StorageService_setBoardSize_args() : height(0), width(0) {
  }

  virtual ~StorageService_setBoardSize_args() noexcept;
  int64_t height;
  int64_t width;

  _StorageService_setBoardSize_args__isset __isset;

  void __set_height(const int64_t val);

  void __set_width(const int64_t val);

  bool operator == (const StorageService_setBoardSize_args & rhs) const
  {
    if (!(height == rhs.height))
      return false;
    if (!(width == rhs.width))
      return false;
    return true;
  }
  bool operator != (const StorageService_setBoardSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageService_setBoardSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageService_setBoardSize_pargs {
 public:


  virtual ~StorageService_setBoardSize_pargs() noexcept;
  const int64_t* height;
  const int64_t* width;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageService_setBoardSize_result {
 public:

  StorageService_setBoardSize_result(const StorageService_setBoardSize_result&);
  StorageService_setBoardSize_result& operator=(const StorageService_setBoardSize_result&);
  StorageService_setBoardSize_result() {
  }

  virtual ~StorageService_setBoardSize_result() noexcept;

  bool operator == (const StorageService_setBoardSize_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageService_setBoardSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageService_setBoardSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageService_setBoardSize_presult {
 public:


  virtual ~StorageService_setBoardSize_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageService_setCell_args__isset {
  _StorageService_setCell_args__isset() : row(false), column(false), newState(false) {}
  bool row :1;
  bool column :1;
  bool newState :1;
} _StorageService_setCell_args__isset;

class StorageService_setCell_args {
 public:

  StorageService_setCell_args(const StorageService_setCell_args&);
  StorageService_setCell_args& operator=(const StorageService_setCell_args&);
  StorageService_setCell_args() : row(0), column(0), newState(( ::CellState::type)0) {
  }

  virtual ~StorageService_setCell_args() noexcept;
  int64_t row;
  int64_t column;
   ::CellState::type newState;

  _StorageService_setCell_args__isset __isset;

  void __set_row(const int64_t val);

  void __set_column(const int64_t val);

  void __set_newState(const  ::CellState::type val);

  bool operator == (const StorageService_setCell_args & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(column == rhs.column))
      return false;
    if (!(newState == rhs.newState))
      return false;
    return true;
  }
  bool operator != (const StorageService_setCell_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageService_setCell_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageService_setCell_pargs {
 public:


  virtual ~StorageService_setCell_pargs() noexcept;
  const int64_t* row;
  const int64_t* column;
  const  ::CellState::type* newState;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageService_setCell_result {
 public:

  StorageService_setCell_result(const StorageService_setCell_result&);
  StorageService_setCell_result& operator=(const StorageService_setCell_result&);
  StorageService_setCell_result() {
  }

  virtual ~StorageService_setCell_result() noexcept;

  bool operator == (const StorageService_setCell_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageService_setCell_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageService_setCell_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageService_setCell_presult {
 public:


  virtual ~StorageService_setCell_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageService_getCell_args__isset {
  _StorageService_getCell_args__isset() : row(false), column(false) {}
  bool row :1;
  bool column :1;
} _StorageService_getCell_args__isset;

class StorageService_getCell_args {
 public:

  StorageService_getCell_args(const StorageService_getCell_args&);
  StorageService_getCell_args& operator=(const StorageService_getCell_args&);
  StorageService_getCell_args() : row(0), column(0) {
  }

  virtual ~StorageService_getCell_args() noexcept;
  int64_t row;
  int64_t column;

  _StorageService_getCell_args__isset __isset;

  void __set_row(const int64_t val);

  void __set_column(const int64_t val);

  bool operator == (const StorageService_getCell_args & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(column == rhs.column))
      return false;
    return true;
  }
  bool operator != (const StorageService_getCell_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageService_getCell_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageService_getCell_pargs {
 public:


  virtual ~StorageService_getCell_pargs() noexcept;
  const int64_t* row;
  const int64_t* column;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageService_getCell_result__isset {
  _StorageService_getCell_result__isset() : success(false) {}
  bool success :1;
} _StorageService_getCell_result__isset;

class StorageService_getCell_result {
 public:

  StorageService_getCell_result(const StorageService_getCell_result&);
  StorageService_getCell_result& operator=(const StorageService_getCell_result&);
  StorageService_getCell_result() {
  }

  virtual ~StorageService_getCell_result() noexcept;
   ::Cell success;

  _StorageService_getCell_result__isset __isset;

  void __set_success(const  ::Cell& val);

  bool operator == (const StorageService_getCell_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageService_getCell_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageService_getCell_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageService_getCell_presult__isset {
  _StorageService_getCell_presult__isset() : success(false) {}
  bool success :1;
} _StorageService_getCell_presult__isset;

class StorageService_getCell_presult {
 public:


  virtual ~StorageService_getCell_presult() noexcept;
   ::Cell* success;

  _StorageService_getCell_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class StorageService_getHeight_args {
 public:

  StorageService_getHeight_args(const StorageService_getHeight_args&);
  StorageService_getHeight_args& operator=(const StorageService_getHeight_args&);
  StorageService_getHeight_args() {
  }

  virtual ~StorageService_getHeight_args() noexcept;

  bool operator == (const StorageService_getHeight_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageService_getHeight_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageService_getHeight_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageService_getHeight_pargs {
 public:


  virtual ~StorageService_getHeight_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageService_getHeight_result__isset {
  _StorageService_getHeight_result__isset() : success(false) {}
  bool success :1;
} _StorageService_getHeight_result__isset;

class StorageService_getHeight_result {
 public:

  StorageService_getHeight_result(const StorageService_getHeight_result&);
  StorageService_getHeight_result& operator=(const StorageService_getHeight_result&);
  StorageService_getHeight_result() : success(0) {
  }

  virtual ~StorageService_getHeight_result() noexcept;
  int64_t success;

  _StorageService_getHeight_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const StorageService_getHeight_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageService_getHeight_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageService_getHeight_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageService_getHeight_presult__isset {
  _StorageService_getHeight_presult__isset() : success(false) {}
  bool success :1;
} _StorageService_getHeight_presult__isset;

class StorageService_getHeight_presult {
 public:


  virtual ~StorageService_getHeight_presult() noexcept;
  int64_t* success;

  _StorageService_getHeight_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class StorageService_getWidth_args {
 public:

  StorageService_getWidth_args(const StorageService_getWidth_args&);
  StorageService_getWidth_args& operator=(const StorageService_getWidth_args&);
  StorageService_getWidth_args() {
  }

  virtual ~StorageService_getWidth_args() noexcept;

  bool operator == (const StorageService_getWidth_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageService_getWidth_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageService_getWidth_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageService_getWidth_pargs {
 public:


  virtual ~StorageService_getWidth_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageService_getWidth_result__isset {
  _StorageService_getWidth_result__isset() : success(false) {}
  bool success :1;
} _StorageService_getWidth_result__isset;

class StorageService_getWidth_result {
 public:

  StorageService_getWidth_result(const StorageService_getWidth_result&);
  StorageService_getWidth_result& operator=(const StorageService_getWidth_result&);
  StorageService_getWidth_result() : success(0) {
  }

  virtual ~StorageService_getWidth_result() noexcept;
  int64_t success;

  _StorageService_getWidth_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const StorageService_getWidth_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageService_getWidth_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageService_getWidth_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageService_getWidth_presult__isset {
  _StorageService_getWidth_presult__isset() : success(false) {}
  bool success :1;
} _StorageService_getWidth_presult__isset;

class StorageService_getWidth_presult {
 public:


  virtual ~StorageService_getWidth_presult() noexcept;
  int64_t* success;

  _StorageService_getWidth_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class StorageServiceClient : virtual public StorageServiceIf {
 public:
  StorageServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  StorageServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void setBoardSize(const int64_t height, const int64_t width);
  void send_setBoardSize(const int64_t height, const int64_t width);
  void recv_setBoardSize();
  void setCell(const int64_t row, const int64_t column, const  ::CellState::type newState);
  void send_setCell(const int64_t row, const int64_t column, const  ::CellState::type newState);
  void recv_setCell();
  void getCell( ::Cell& _return, const int64_t row, const int64_t column);
  void send_getCell(const int64_t row, const int64_t column);
  void recv_getCell( ::Cell& _return);
  int64_t getHeight();
  void send_getHeight();
  int64_t recv_getHeight();
  int64_t getWidth();
  void send_getWidth();
  int64_t recv_getWidth();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class StorageServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<StorageServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (StorageServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_setBoardSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setCell(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCell(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHeight(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getWidth(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  StorageServiceProcessor(::std::shared_ptr<StorageServiceIf> iface) :
    iface_(iface) {
    processMap_["setBoardSize"] = &StorageServiceProcessor::process_setBoardSize;
    processMap_["setCell"] = &StorageServiceProcessor::process_setCell;
    processMap_["getCell"] = &StorageServiceProcessor::process_getCell;
    processMap_["getHeight"] = &StorageServiceProcessor::process_getHeight;
    processMap_["getWidth"] = &StorageServiceProcessor::process_getWidth;
  }

  virtual ~StorageServiceProcessor() {}
};

class StorageServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  StorageServiceProcessorFactory(const ::std::shared_ptr< StorageServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< StorageServiceIfFactory > handlerFactory_;
};

class StorageServiceMultiface : virtual public StorageServiceIf {
 public:
  StorageServiceMultiface(std::vector<std::shared_ptr<StorageServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~StorageServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<StorageServiceIf> > ifaces_;
  StorageServiceMultiface() {}
  void add(::std::shared_ptr<StorageServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void setBoardSize(const int64_t height, const int64_t width) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setBoardSize(height, width);
    }
    ifaces_[i]->setBoardSize(height, width);
  }

  void setCell(const int64_t row, const int64_t column, const  ::CellState::type newState) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setCell(row, column, newState);
    }
    ifaces_[i]->setCell(row, column, newState);
  }

  void getCell( ::Cell& _return, const int64_t row, const int64_t column) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCell(_return, row, column);
    }
    ifaces_[i]->getCell(_return, row, column);
    return;
  }

  int64_t getHeight() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getHeight();
    }
    return ifaces_[i]->getHeight();
  }

  int64_t getWidth() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getWidth();
    }
    return ifaces_[i]->getWidth();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class StorageServiceConcurrentClient : virtual public StorageServiceIf {
 public:
  StorageServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  StorageServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void setBoardSize(const int64_t height, const int64_t width);
  int32_t send_setBoardSize(const int64_t height, const int64_t width);
  void recv_setBoardSize(const int32_t seqid);
  void setCell(const int64_t row, const int64_t column, const  ::CellState::type newState);
  int32_t send_setCell(const int64_t row, const int64_t column, const  ::CellState::type newState);
  void recv_setCell(const int32_t seqid);
  void getCell( ::Cell& _return, const int64_t row, const int64_t column);
  int32_t send_getCell(const int64_t row, const int64_t column);
  void recv_getCell( ::Cell& _return, const int32_t seqid);
  int64_t getHeight();
  int32_t send_getHeight();
  int64_t recv_getHeight(const int32_t seqid);
  int64_t getWidth();
  int32_t send_getWidth();
  int64_t recv_getWidth(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
