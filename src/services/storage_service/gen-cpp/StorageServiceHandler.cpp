// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "StorageService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include "common/cell/Cell.hpp"
#include "common/cell/CellState.hpp"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class StorageServiceHandler : virtual public StorageServiceIf {
 Board board;
 public:
  StorageServiceHandler() {
    // Your initialization goes here
  }

  void setBoardSize(const int64_t height, const int64_t width) {
    board.setBoardSize(height, width);
  }

  void setCell(const int64_t row, const int64_t column, const  ::CellState::type newState) {
    board[row][column] = fromThrift(newState);
  }

  void getCell( ::Cell& _return, const int64_t row, const int64_t column) {
    Cell retrievedCell = board[row][column];
    _return = toThrift(retrievedCell);
  }

  int64_t getHeight() {
    return board.getHeight();
  }

  int64_t getWidth() {
    return board.getWidth();
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<StorageServiceHandler> handler(new StorageServiceHandler());
  ::std::shared_ptr<TProcessor> processor(new StorageServiceProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

